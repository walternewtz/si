env:
  rcloneconfig: "ENCRYPTED[7fb6f28b8c6e2d0096ac245d326436c5912fe249d2d2577b55147b8a53d3dd709e2f9c043d660e8323f3683fcf7e8416]"
  WORKDIR: "/tmp/cirrus-ci-build"
  EMAIL: "ENCRYPTED[b3869b3e0664d040f4a10e5237d993a8c578801ea5228ad0fc684d6e196c47219c4fab76c6df0bf7ffd7159b1a574080]"
  CIRRUS_CLONE_DEPTH: "1"


task:
  name: "Setting Up, Syncing, Building and Uploading"
  only_if: $CIRRUS_REPO_OWNER == 'walternewtz'
  timeout_in: 120m
  container:
    dockerfile: Dockerfile
    cpu: 8
    memory: 32G

  Environment-Check_background_script:
     - cat /etc/os* && env && nproc && gcc --version && clang --version
  
  Load-Ccache_background_script:
     - cd $WORKDIR
     - mkdir -p ~/.config/rclone
     - echo "$rcloneconfig" > ~/.config/rclone/rclone.conf
     - name_rom=$(grep init $CIRRUS_WORKING_DIR/build.sh -m 1 | cut -d / -f 4)
     - rclone copy --drive-chunk-size 256M --stats 1s rom:rom/ccache/$name_rom/ccache.tar.gz $WORKDIR -P
     - tar xzf ccache.tar.gz
     - rm -rf ccache.tar.gz

  Storage-Check_background_script:
     - df -h && lsblk && ls -l -a -h && nproc

  Sync-rom_script:
     - set -exv
     - git config --global user.name $CIRRUS_REPO_OWNER
     - git config --global user.email $EMAIL
     - name_rom=$(grep init $CIRRUS_WORKING_DIR/build.sh -m 1 | cut -d / -f 4)
     - mkdir -p $WORKDIR/rom/$name_rom
     - cd $WORKDIR/rom/$name_rom
     - rm -rf .repo/local_manifests
     - command=$(head $CIRRUS_WORKING_DIR/build.sh -n $(expr $(grep 'build/envsetup.sh' $CIRRUS_WORKING_DIR/build.sh -n | cut -f1 -d:) - 1))
     - only_sync=$(grep 'repo sync' $CIRRUS_WORKING_DIR/build.sh)
     - bash -c "$command" || true
     - curl -sO https://api.cirrus-ci.com/v1/task/$CIRRUS_TASK_ID/logs/Sync-rom.log
     - a=$(grep 'Cannot remove project' Sync-rom.log -m1|| true)
     - b=$(grep "^fatal: remove-project element specifies non-existent project" Sync-rom.log -m1 || true)
     - c=$(grep 'repo sync has finished' Sync-rom.log -m1 || true)
     - d=$(grep 'Failing repos:' Sync-rom.log -n -m1 || true)
     - e=$(grep 'fatal: Unable' Sync-rom.log || true)
     - if [[ $a == *'Cannot remove project'* ]]
     - then
     - a=$(echo $a | cut -d ':' -f2)
     - rm -rf $a
     - repo sync -c --no-clone-bundle --no-tags --optimized-fetch --prune --force-sync -j$(nproc --all)
     - elif [[ $b == *'remove-project element specifies non-existent'* ]]
     - then exit 1
     - elif [[ $c == *'repo sync has finished'* ]]
     - then true
     - elif [[ $d == *'Failing repos:'* ]]
     - then
     - d=$(expr $(grep 'Failing repos:' Sync-rom.log -n -m 1| cut -d ':' -f1) + 1)
     - d2=$(expr $(grep 'Try re-running' Sync-rom.log -n -m1 | cut -d ':' -f1) - 1 )
     - rm -rf $(head -n $d2 Sync-rom.log | tail -n +$d)
     - repo sync -c --no-clone-bundle --no-tags --optimized-fetch --prune --force-sync -j$(nproc --all)
     - elif [[ $e == *'fatal: Unable'* ]]
     - then
     - rm -rf $(grep 'fatal: Unable' Sync-rom.log | cut -d ':' -f2 | cut -d "'" -f2)
     - repo sync -c --no-clone-bundle --no-tags --optimized-fetch --prune --force-sync -j$(nproc --all)
     - else
     #- (repo forall -c 'git checkout .' && bash -c "$only_sync") || (find -name shallow.lock -delete && find -name index.lock -delete && bash -c "$only_sync")
     - exit 1
     - fi
     - rm -rf Sync-rom.log

     
     
  Build-rom_script:
     - set -e
     - name_rom=$(grep init $CIRRUS_WORKING_DIR/build.sh -m 1 | cut -d / -f 4)
     - device=$(grep unch $CIRRUS_WORKING_DIR/build.sh -m 1 | cut -d ' ' -f 2 | cut -d _ -f 2 | cut -d - -f 1)
     - cd $WORKDIR/rom/$name_rom
     - export PATH="/usr/lib/ccache:$PATH"
     - export CCACHE_DIR=$WORKDIR/ccache
     - export CCACHE_EXEC=/usr/bin/ccache
     - export USE_CCACHE=1
     - export CCACHE_DEPEND=true
     - export CCACHE_FILECLONE=true
     - export CCACHE_LIMIT_MULTIPLE=0.9
     - export CCACHE_NOCOMPRESS=true
     - export CCACHE_NOHASHDIR=1
     - which ccache
     - ccache -M 100
     - ccache -z
     - command=$(tail $CIRRUS_WORKING_DIR/build.sh -n +$(expr $(grep 'build/envsetup.sh' $CIRRUS_WORKING_DIR/build.sh -n | cut -f1 -d:) - 1)| head -n -1 | grep -v '# upload rom')
     - bash -c "$command"
     
  Ccache-info_script:
     - set -e
     - export CCACHE_DIR=$WORKDIR/ccache
     - ccache -s

  Upload-build_script:
     - cd $CIRRUS_WORKING_DIR
     - chmod u+r+x ziping.sh
     - ./ziping.sh
